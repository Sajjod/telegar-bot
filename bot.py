import os
import logging
from logging.handlers import TimedRotatingFileHandler
import time
import threading
import schedule
from telebot import TeleBot
from database import init_db
from handlers import register_handlers

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
BASE_DIR = os.path.expanduser("~/")
DATA_DIR = os.path.join(BASE_DIR, "bot_data")
LOG_PATH = os.path.join(DATA_DIR, "bot.log")
if not os.path.exists(DATA_DIR):
    os.makedirs(DATA_DIR, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger("BotLogger")
logger.setLevel(logging.INFO)
formatter = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
console_handler = logging.StreamHandler()
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)
try:
    handler = TimedRotatingFileHandler(LOG_PATH, when="midnight", backupCount=7)
    handler.setFormatter(formatter)
    logger.addHandler(handler)
except PermissionError as e:
    logger.error(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤: {e}, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤: {e}, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Render)
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = [int(x) for x in os.getenv("ADMIN_IDS", "").split(",") if x]  # –§–æ—Ä–º–∞—Ç: "123,456"
ADMIN_USERNAME = os.getenv("ADMIN_USERNAME", "@YourAdmin")
STORAGE_CHANNEL_ID = os.getenv("STORAGE_CHANNEL_ID")
PUBLIC_CHANNEL_ID = os.getenv("PUBLIC_CHANNEL_ID")
CATEGORY_MAP = {
    "Games": "üéÆ –ò–≥—Ä—ã",
    "Apps": "üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
    "Docs": "üìú –î–æ–∫—É–º–µ–Ω—Ç—ã"
}
RATE_LIMIT_SECONDS = 2
HOURS_24 = 24 * 60 * 60
REVIEW_RETENTION_DAYS = 30

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TeleBot(TOKEN)

# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
def run_scheduled_tasks():
    from database import clean_old_reviews, clean_old_files, clean_top_users
    schedule.every(24).hours.do(clean_old_reviews)
    schedule.every(24).hours.do(clean_old_files)
    schedule.every(24).hours.do(clean_top_users)
    while True:
        schedule.run_pending()
        time.sleep(60)

if __name__ == "__main__":
    try:
        init_db()
        register_handlers(bot)
        scheduler_thread = threading.Thread(target=run_scheduled_tasks, daemon=True)
        scheduler_thread.start()
        logger.info("–ë–æ—Ç –≤ –¥–µ–ª–µ! üöÄ")
        while True:
            try:
                bot.polling(none_stop=True)
            except Exception as e:
                logger.error(f"Polling —Ä—É—Ö–Ω—É–ª: {e}")
                time.sleep(5)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∫–æ—Å—è–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        import os
import psycopg2
from psycopg2 import pool
import redis
import time
from contextlib import contextmanager
import logging

logger = logging.getLogger("BotLogger")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL (–¥–ª—è Render)
DATABASE_URL = os.getenv("DATABASE_URL")
db_pool = psycopg2.pool.SimpleConnectionPool(1, 20, DATABASE_URL)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Redis
REDIS_URL = os.getenv("REDIS_URL", "redis://localhost:6379/0")
redis_client = redis.Redis.from_url(REDIS_URL, decode_responses=True)

HOURS_24 = 24 * 60 * 60
REVIEW_RETENTION_DAYS = 30

@contextmanager
def get_db():
    conn = db_pool.getconn()
    try:
        cursor = conn.cursor()
        yield cursor
        conn.commit()
    except Exception as e:
        conn.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise
    finally:
        cursor.close()
        db_pool.putconn(conn)

def init_db():
    try:
        with get_db() as cursor:
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS files (
                    code TEXT PRIMARY KEY,
                    name TEXT NOT NULL,
                    category TEXT NOT NULL,
                    file_id TEXT,
                    timestamp FLOAT DEFAULT EXTRACT(EPOCH FROM NOW())
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS download_stats (
                    code TEXT PRIMARY KEY,
                    downloads INTEGER DEFAULT 0,
                    FOREIGN KEY (code) REFERENCES files(code) ON DELETE CASCADE
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS ratings (
                    code TEXT,
                    rating INTEGER,
                    FOREIGN KEY (code) REFERENCES files(code) ON DELETE CASCADE
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id BIGINT PRIMARY KEY,
                    last_active FLOAT,
                    username TEXT
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS channels (
                    channel TEXT PRIMARY KEY
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS reviews (
                    id SERIAL PRIMARY KEY,
                    code TEXT,
                    user_id BIGINT,
                    review TEXT,
                    timestamp FLOAT DEFAULT EXTRACT(EPOCH FROM NOW()),
                    FOREIGN KEY (code) REFERENCES files(code) ON DELETE CASCADE,
                    CONSTRAINT unique_code_user UNIQUE (code, user_id)
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS user_activity (
                    user_id BIGINT,
                    action TEXT,
                    timestamp FLOAT DEFAULT EXTRACT(EPOCH FROM NOW()),
                    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
                )
            """)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS feedback (
                    id SERIAL PRIMARY KEY,
                    user_id BIGINT,
                    message TEXT NOT NULL,
                    video_id TEXT,
                    feedback_type TEXT,
                    timestamp FLOAT DEFAULT EXTRACT(EPOCH FROM NOW()),
                    status TEXT DEFAULT 'new',
                    reply TEXT,
                    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
                )
            """)
            cursor.execute("""
                DELETE FROM reviews
                WHERE code NOT IN (SELECT code FROM files)
                OR timestamp < EXTRACT(EPOCH FROM NOW()) - %s
            """, (REVIEW_RETENTION_DAYS * HOURS_24,))
            cursor.execute("""
                DELETE FROM user_activity
                WHERE timestamp < EXTRACT(EPOCH FROM NOW()) - %s
            """, (HOURS_24,))
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞, —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

def clean_old_reviews():
    try:
        with get_db() as cursor:
            threshold = time.time() - 30 * 24 * 60 * 60
            cursor.execute("DELETE FROM reviews WHERE timestamp < %s", (threshold,))
        logger.info("–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —Å—Ç–∞—Ä—ã–µ –æ—Ç–∑—ã–≤—ã (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π) —É–¥–∞–ª–µ–Ω—ã")
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –æ—Ç–∑—ã–≤–æ–≤: {e}")

def clean_old_reviews_for_file(code, max_pages=5, per_page=3):
    try:
        with get_db() as cursor:
            cursor.execute("SELECT COUNT(*) FROM reviews WHERE code = %s", (code,))
            total_reviews = cursor.fetchone()[0]
            total_pages = (total_reviews + per_page - 1) // per_page
            
            if total_pages <= 3:
                logger.info(f"–û—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞ {code} –º–µ–Ω—å—à–µ 3 —Å—Ç—Ä–∞–Ω–∏—Ü ({total_pages}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É")
                return
            
            if total_pages >= max_pages:
                threshold = time.time() - 10 * 24 * 60 * 60  # 10 –¥–Ω–µ–π
                excess = total_reviews - (max_pages * per_page)
                cursor.execute(
                    """
                    DELETE FROM reviews
                    WHERE code = %s AND timestamp < %s
                    ORDER BY timestamp ASC
                    LIMIT %s
                    """,
                    (code, threshold, excess)
                )
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ {cursor.rowcount} —Å—Ç–∞—Ä—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞ {code}")
            else:
                logger.info(f"–û—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Ñ–∞–π–ª–∞ {code} –º–µ–Ω—å—à–µ 5 —Å—Ç—Ä–∞–Ω–∏—Ü ({total_pages}), –Ω–æ –±–æ–ª—å—à–µ 3, –∂–¥—ë–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è {code}: {e}")

def clean_old_files():
    try:
        with get_db() as cursor:
            threshold = time.time() - 10 * 24 * 60 * 60
            cursor.execute("DELETE FROM files WHERE timestamp < %s RETURNING code", (threshold,))
            deleted = cursor.fetchall()
            logger.info(f"–£–¥–∞–ª–µ–Ω–æ {len(deleted)} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤")
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

def clean_top_users():
    try:
        with get_db() as cursor:
            cursor.execute("DELETE FROM user_activity WHERE action IN ('download', 'review')")
        logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—á–∏—â–µ–Ω–∞")
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–ø-5: {e}")

def load_files():
    try:
        with get_db() as cursor:
            cursor.execute("SELECT code, name, category, file_id FROM files")
            files = {row[0].strip().lower(): {"name": row[1], "category": row[2], "file_id": row[3]}
                     for row in cursor.fetchall()}
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤")
            return files
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")
        return {}

def save_file(code, file_id, name, category):
    try:
        if not all([code, file_id, name, category]):
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: code={code}, file_id={file_id}, name={name}, category={category}")
            raise ValueError("–ß—Ç–æ-—Ç–æ –ø—É—Å—Ç–æ–µ, –±—Ä–æ! üòÖ")
        from main import CATEGORY_MAP
        if category not in CATEGORY_MAP.values():
            logger.error(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category} ‚Äî —ç—Ç–æ —á—Ç–æ —Ç–∞–∫–æ–µ?")
            raise ValueError(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –Ω–µ –≤ —Å–ø–∏—Å–∫–µ!")
        code = code.strip().lower()
        with get_db() as cursor:
            cursor.execute("SELECT code FROM files WHERE code = %s", (code,))
            existing = cursor.fetchone()
            if existing:
                logger.info(f"–§–∞–π–ª {code} —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è—é...")
                cursor.execute("UPDATE files SET file_id = %s, name = %s, category = %s WHERE code = %s",
                               (file_id, name, category, code))
            else:
                cursor.execute(
                    "INSERT INTO files (code, file_id, name, category, timestamp) VALUES (%s, %s, %s, %s, EXTRACT(EPOCH FROM NOW()))",
                    (code, file_id, name, category)
                )
                cursor.execute("INSERT INTO download_stats (code, downloads) VALUES (%s, 0) ON CONFLICT (code) DO NOTHING", (code,))
        logger.info(f"–§–∞–π–ª {code} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–¥–∞—á–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}! üöÄ")
    except (psycopg2.Error, ValueError) as e:
        logger.error(f"–ù–µ –≤—ã—à–ª–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª {code}: {str(e)}")
        raise

def delete_file(code):
    try:
        code = code.strip().lower()
        with get_db() as cursor:
            cursor.execute("DELETE FROM files WHERE code = %s", (code,))
        logger.info(f"–§–∞–π–ª {code} –∏ –≤—Å—ë, —á—Ç–æ —Å –Ω–∏–º —Å–≤—è–∑–∞–Ω–æ, —Å—Ç—ë—Ä—Ç–æ! üóëÔ∏è")
    except psycopg2.Error as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {code}: {e}")
        raise

def load_categories():
    try:
        from main import CATEGORY_MAP
        with get_db() as cursor:
            cursor.execute("SELECT code, category FROM files")
            result = {cat: [] for cat in CATEGORY_MAP.values()}
            for row in cursor.fetchall():
                code = row[0].strip().lower()
                category = row[1]
                if category in result:
                    result[category].append(code)
            return result
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        return {cat: [] for cat in CATEGORY_MAP.values()}

def load_download_stats():
    try:
        with get_db() as cursor:
            cursor.execute("SELECT code, downloads FROM download_stats")
            stats = {row[0].strip().lower(): row[1] for row in cursor.fetchall()}
            logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ {len(stats)} —Ñ–∞–π–ª–∞–º –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return stats
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: {e}")
        return {}

def increment_download(code, user_id):
    try:
        from main import HOURS_24
        code = code.strip().lower()
        with get_db() as cursor:
            one_hour_ago = time.time() - 60 * 60
            cursor.execute(
                "SELECT COUNT(*) FROM user_activity WHERE user_id = %s AND action = 'download' AND timestamp > %s",
                (user_id, one_hour_ago)
            )
            download_count = cursor.fetchone()[0]
            if download_count >= 10:
                raise ValueError("–¢—ã —Å–∫–∞—á–∞–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ! –ú–∞–∫—Å–∏–º—É–º 10 —Ñ–∞–π–ª–æ–≤ –≤ —á–∞—Å! ‚è≥")
            cursor.execute("UPDATE download_stats SET downloads = downloads + 1 WHERE code = %s", (code,))
            cursor.execute(
                "INSERT INTO user_activity (user_id, action, timestamp) VALUES (%s, %s, EXTRACT(EPOCH FROM NOW()))",
                (user_id, "download")
            )
        logger.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ {code} –¥–ª—è —é–∑–µ—Ä–∞ {user_id} –∑–∞—Å—á–∏—Ç–∞–Ω–æ")
    except (psycopg2.Error, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {code} –¥–ª—è {user_id}: {e}")
        raise

def save_rating(code, rating):
    try:
        code = code.strip().lower()
        with get_db() as cursor:
            cursor.execute("SELECT code FROM files WHERE code = %s", (code,))
            if not cursor.fetchone():
                logger.error(f"–§–∞–π–ª {code} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞")
                raise ValueError(f"–§–∞–π–ª {code} –∫—É–¥–∞-—Ç–æ –¥–µ–ª—Å—è! üòÖ")
            cursor.execute("INSERT INTO ratings (code, rating) VALUES (%s, %s)", (code, rating))
        logger.info(f"–†–µ–π—Ç–∏–Ω–≥ {rating} –¥–ª—è —Ñ–∞–π–ª–∞ {code} –∑–∞–ø–∏—Å–∞–Ω")
    except (psycopg2.Error, ValueError) as e:
        logger.error(f"–ù–µ –≤—ã—à–ª–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è {code}: {e}")
        raise

def load_ratings():
    try:
        with get_db() as cursor:
            cursor.execute("SELECT code, rating FROM ratings")
            result = {}
            for row in cursor.fetchall():
                code = row[0].strip().lower()
                if code not in result:
                    result[code] = []
                result[code].append(row[1])
            return result
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤: {e}")
        return {}

def save_review(code, user_id, review):
    try:
        from main import HOURS_24
        if not code or not user_id or not review:
            logger.error(f"–ü—É—Å—Ç–æ–π –æ—Ç–∑—ã–≤: code={code}, user_id={user_id}, review={review}")
            raise ValueError("–≠–π, –æ—Ç–∑—ã–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! üòú")
        if len(review) > 200:
            logger.error(f"–û—Ç–∑—ã–≤ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: {len(review)} —Å–∏–º–≤–æ–ª–æ–≤")
            raise ValueError("–ë–µ—Ä–∏ –∫–æ—Ä–æ—á–µ, –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤! üìù")
        
        with get_db() as cursor:
            two_hours_ago = time.time() - 2 * 60 * 60
            cursor.execute(
                "SELECT COUNT(*) FROM reviews WHERE user_id = %s AND timestamp > %s",
                (user_id, two_hours_ago)
            )
            review_count = cursor.fetchone()[0]
            if review_count >= 3:
                raise ValueError("–¢—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª 3 –æ—Ç–∑—ã–≤–∞ –∑–∞ 2 —á–∞—Å–∞! –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ! ‚è≥")
        
        code = code.strip().lower()
        with get_db() as cursor:
            cursor.execute("SELECT code FROM files WHERE code = %s", (code,))
            if not cursor.fetchone():
                logger.error(f"–§–∞–π–ª {code} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–∑—ã–≤–∞")
                raise ValueError(f"–§–∞–π–ª {code} –ø—Ä–æ–ø–∞–ª! üò±")
            cursor.execute(
                "SELECT id FROM reviews WHERE code = %s AND user_id = %s",
                (code, user_id)
            )
            existing_review = cursor.fetchone()
            if existing_review:
                logger.info(f"–Æ–∑–µ—Ä {user_id} —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤ –¥–ª—è {code}")
                raise ValueError("–≠–π, —Ç—ã —É–∂–µ –Ω–∞–ø–∏—Å–∞–ª –æ—Ç–∑—ã–≤ –¥–ª—è —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞! üòé")
            cursor.execute(
                "INSERT INTO reviews (code, user_id, review, timestamp) VALUES (%s, %s, %s, EXTRACT(EPOCH FROM NOW()))",
                (code, user_id, review)
            )
            cursor.execute(
                "INSERT INTO user_activity (user_id, action, timestamp) VALUES (%s, %s, EXTRACT(EPOCH FROM NOW()))",
                (user_id, "review")
            )
        logger.info(f"–û—Ç–∑—ã–≤ –¥–ª—è {code} –æ—Ç —é–∑–µ—Ä–∞ {user_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {review[:50]}...")
    except (psycopg2.Error, ValueError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –¥–ª—è {code}, —é–∑–µ—Ä {user_id}: {str(e)}")
        raise

def load_reviews():
    try:
        with get_db() as cursor:
            cursor.execute("SELECT id, code, user_id, review FROM reviews")
            result = {}
            for row in cursor.fetchall():
                code = row[1].strip().lower() if row[1] else None
                if not code:
                    logger.warning(f"–û—Ç–∑—ã–≤ —Å –ø—É—Å—Ç—ã–º code: id={row[0]}")
                    continue
                if code not in result:
                    result[code] = []
                result[code].append({"id": row[0], "code": code, "user_id": row[2], "text": row[3]})
            for code in result:
                clean_old_reviews_for_file(code)
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {sum(len(r) for r in result.values())} –æ—Ç–∑—ã–≤–æ–≤")
            return result
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤: {str(e)}")
        return {}

def get_reviews_count():
    try:
        with get_db() as cursor:
            cursor.execute("SELECT COUNT(*) FROM reviews r JOIN files f ON r.code = f.code")
            count = cursor.fetchone()[0]
            logger.info(f"–í—Å–µ–≥–æ {count} –æ—Ç–∑—ã–≤–æ–≤")
            return count
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á—ë—Ç–∞ –æ—Ç–∑—ã–≤–æ–≤: {e}")
        return 0

def delete_review(review_id):
    try:
        with get_db() as cursor:
            cursor.execute("DELETE FROM reviews WHERE id = %s", (review_id,))
        logger.info(f"–û—Ç–∑—ã–≤ {review_id} —Å—Ç—ë—Ä—Ç")
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞ {review_id}: {e}")

def save_user(user_id, username=None):
    try:
        with get_db() as cursor:
            cursor.execute(
                "INSERT INTO users (user_id, last_active, username) VALUES (%s, EXTRACT(EPOCH FROM NOW()), %s) "
                "ON CONFLICT (user_id) DO UPDATE SET last_active = EXTRACT(EPOCH FROM NOW()), username = EXCLUDED.username",
                (user_id, username)
            )
        logger.info(f"–Æ–∑–µ—Ä {user_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω, username: {username}")
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —é–∑–µ—Ä–∞ {user_id}: {e}")

def get_users():
    try:
        with get_db() as cursor:
            cursor.execute("SELECT user_id FROM users")
            return [row[0] for row in cursor.fetchall()]
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —é–∑–µ—Ä–æ–≤: {e}")
        return []

def get_active_users():
    try:
        from main import HOURS_24
        with get_db() as cursor:
            cursor.execute(
                "SELECT COUNT(*) FROM users WHERE last_active > EXTRACT(EPOCH FROM NOW()) - %s",
                (HOURS_24,)
            )
            return cursor.fetchone()[0]
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á—ë—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —é–∑–µ—Ä–æ–≤: {e}")
        return 0

def get_top_users():
    try:
        with get_db() as cursor:
            cursor.execute("""
                SELECT u.user_id, u.username,
                       SUM(CASE WHEN a.action = 'download' THEN 1 ELSE 0 END) as downloads,
                       SUM(CASE WHEN a.action = 'review' THEN 1 ELSE 0 END) as reviews
                FROM users u
                LEFT JOIN user_activity a ON u.user_id = a.user_id
                WHERE a.action IN ('download', 'review')
                GROUP BY u.user_id, u.username
                ORDER BY (COALESCE(downloads, 0) + COALESCE(reviews, 0)) DESC
                LIMIT 5
            """)
            return [
                {
                    "user_id": row[0],
                    "username": row[1] or f"ID{row[0]}",
                    "downloads": row[2] or 0,
                    "reviews": row[3] or 0
                }
                for row in cursor.fetchall()
            ]
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–ø–∞ —é–∑–µ—Ä–æ–≤: {e}")
        return []

def load_channels():
    try:
        with get_db() as cursor:
            cursor.execute("SELECT channel FROM channels")
            return [row[0] for row in cursor.fetchall()]
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        return []

def save_channel(channel):
    try:
        with get_db() as cursor:
            cursor.execute("INSERT INTO channels (channel) VALUES (%s) ON CONFLICT (channel) DO NOTHING", (channel,))
        logger.info(f"–ö–∞–Ω–∞–ª {channel} –¥–æ–±–∞–≤–ª–µ–Ω")
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel}: {e}")

def remove_channel(channel):
    try:
        with get_db() as cursor:
            cursor.execute("DELETE FROM channels WHERE channel = %s", (channel,))
        logger.info(f"–ö–∞–Ω–∞–ª {channel} —É–¥–∞–ª—ë–Ω")
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ {channel}: {e}")

def save_feedback(user_id, message, video_id=None, feedback_type=None):
    try:
        from main import ADMIN_IDS
        with get_db() as cursor:
            cursor.execute(
                """
                INSERT INTO feedback (user_id, message, video_id, feedback_type, timestamp)
                VALUES (%s, %s, %s, %s, EXTRACT(EPOCH FROM NOW()))
                RETURNING id
                """,
                (user_id, message, video_id, feedback_type)
            )
            feedback_id = cursor.fetchone()[0]
            for admin_id in ADMIN_IDS:
                bot = TeleBot(os.getenv("BOT_TOKEN"))
                buttons = [
                    create_inline_button("üìù –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_feedback_{feedback_id}"),
                    create_inline_button("üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–°", callback_data=f"send_pm_{user_id}")
                ]
                markup = create_inline_markup(buttons)
                bot.send_message(
                    admin_id,
                    f"–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ (ID: {feedback_id}) –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–¢–∏–ø: {feedback_type}):\n{message}" +
                    (f"\n–í–∏–¥–µ–æ: [–í–∏–¥–µ–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ]" if video_id else ""),
                    reply_markup=markup
                )
                if video_id:
                    bot.send_video(admin_id, video_id)
        logger.info(f"–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç {user_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, ID: {feedback_id}")
        return feedback_id
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {e}")
        raise

def load_feedback(page=0, per_page=5):
    try:
        offset = page * per_page
        with get_db() as cursor:
            cursor.execute(
                """
                SELECT id, user_id, message, video_id, feedback_type, timestamp, status, reply
                FROM feedback
                ORDER BY timestamp DESC
                LIMIT %s OFFSET %s
                """,
                (per_page, offset)
            )
            feedbacks = [
                {
                    "id": row[0],
                    "user_id": row[1],
                    "message": row[2],
                    "video_id": row[3],
                    "feedback_type": row[4],
                    "timestamp": row[5],
                    "status": row[6],
                    "reply": row[7]
                }
                for row in cursor.fetchall()
            ]
            cursor.execute("SELECT COUNT(*) FROM feedback")
            total = cursor.fetchone()[0]
            return feedbacks, total
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤: {e}")
        return [], 0

def update_feedback(feedback_id, status, reply=None):
    try:
        with get_db() as cursor:
            if reply:
                cursor.execute(
                    "UPDATE feedback SET status = %s, reply = %s WHERE id = %s",
                    (status, reply, feedback_id)
                )
            else:
                cursor.execute(
                    "UPDATE feedback SET status = %s WHERE id = %s",
                    (status, feedback_id)
                )
        logger.info(f"–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å {feedback_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞, —Å—Ç–∞—Ç—É—Å: {status}")
    except psycopg2.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ {feedback_id}: {e}")
        raise
        import time
import re
from telebot import types
from telebot.apihelper import ApiTelegramException
import logging

logger = logging.getLogger("BotLogger")

user_last_request = {}

def rate_limit(seconds=2):
    def decorator(func):
        def wrapper(message, *args, **kwargs):
            user_id = message.from_user.id
            current_time = time.time()
            last_request = user_last_request.get(user_id, 0)
            if current_time - last_request < seconds:
                return None
            user_last_request[user_id] = current_time
            return func(message, *args, **kwargs)
        return wrapper
    return decorator

def create_inline_button(text, callback_data=None, url=None):
    if callback_data and len(callback_data.encode('utf-8')) > 64:
        logger.error(f"callback_data –¥–ª–∏–Ω–Ω–µ–µ 64 –±–∞–π—Ç: {callback_data}")
        raise ValueError("callback_data —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!")
    if url:
        return types.InlineKeyboardButton(text, url=url)
    return types.InlineKeyboardButton(text, callback_data=callback_data)

def create_inline_markup(buttons, row_width=2):
    markup = types.InlineKeyboardMarkup(row_width=row_width)
    if isinstance(buttons[0], list):
        for row in buttons:
            markup.row(*row)
    else:
        for i in range(0, len(buttons), row_width):
            markup.row(*buttons[i:i + row_width])
    return markup

def create_inline_markup_with_rows(button_rows):
    markup = types.InlineKeyboardMarkup()
    for row in button_rows:
        markup.row(*[create_inline_button(btn["text"], callback_data=btn.get("callback_data"), url=btn.get("url")) for btn in row])
    return markup

def check_subscription(user_id, channels, admin_ids):
    if user_id in admin_ids or not channels:
        return True
    bot = TeleBot(os.getenv("BOT_TOKEN"))
    for channel in channels:
        try:
            member = bot.get_chat_member(channel, user_id)
            if member.status not in ["member", "administrator", "creator"]:
                return False
        except ApiTelegramException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {channel} –¥–ª—è {user_id}: {e}")
            return False
    return True

def extract_channel_id(link):
    match = re.search(r't\.me/([a-zA-Z0-9_]+)', link)
    return f"@{match.group(1)}" if match else None

def validate_code(code):
    return bool(re.match(r"^[a-zA-Z0-9_\-\.]{1,50}$", code))
    import time
import threading
from telebot.apihelper import ApiTelegramException
import logging
from database import (load_files, save_file, delete_file, load_categories, load_download_stats, increment_download,
                     save_rating, load_ratings, save_review, load_reviews, get_reviews_count, delete_review,
                     save_user, get_users, get_active_users, get_top_users, load_channels, save_channel, remove_channel,
                     save_feedback, load_feedback, update_feedback)
from utils import rate_limit, create_inline_button, create_inline_markup, create_inline_markup_with_rows, check_subscription, extract_channel_id, validate_code

logger = logging.getLogger("BotLogger")

def register_handlers(bot):
    # –•—Ä–∞–Ω–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ Redis
    from database import redis_client

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    def show_main_menu(chat_id, message_id=None):
        buttons = [
            create_inline_button("üìÇ –§–∞–π–ª—ã", callback_data="catalog"),
            create_inline_button("‚ÑπÔ∏è –ü—Ä–æ –±–æ—Ç–∞", callback_data="about"),
            create_inline_button("üì© –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="feedback"),
            create_inline_button("üèÜ –¢–æ–ø-5", callback_data="top_users")
        ]
        markup = create_inline_markup(buttons)
        text = "–ô–æ, —á–µ–º –∑–∞–π–º—ë–º—Å—è? üòé"
        if message_id:
            bot.edit_message_text(text, chat_id, message_id, reply_markup=markup)
        else:
            bot.send_message(chat_id, text, reply_markup=markup)

    # –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞
    def show_admin_panel(chat_id, message_id=None):
        buttons = [
            create_inline_button("‚ûï –ó–∞–ª–∏—Ç—å —Ñ–∞–π–ª", callback_data="admin_add_file"),
            create_inline_button("üìÑ –í—Å–µ —Ñ–∞–π–ª—ã", callback_data="admin_list_files_0"),
            create_inline_button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª", callback_data="admin_delete_file_page_0"),
            create_inline_button("üì¢ –†–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º", callback_data="admin_broadcast"),
            create_inline_button("üì¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª", callback_data="admin_publish_post"),
            create_inline_button("üìä –°—Ç–∞—Ç—ã", callback_data="admin_stats"),
            create_inline_button("üìå –ö–∞–Ω–∞–ª—ã", callback_data="admin_manage_channels"),
            create_inline_button("üì¨ –û—Ç–∑—ã–≤—ã", callback_data="admin_view_feedback_0"),
            create_inline_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
        ]
        markup = create_inline_markup(buttons)
        text = "üî• –ü–∞–Ω–µ–ª—å –±–æ—Å—Å–∞! –ß—Ç–æ –¥–µ–ª–∞–µ–º?"
        if message_id:
            bot.edit_message_text(text, chat_id, message_id, reply_markup=markup)
        else:
            bot.send_message(chat_id, text, reply_markup=markup)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
    def send_file(chat_id, code, files, user_id):
        try:
            code = code.strip().lower()
            if code not in files or not files[code]["file_id"]:
                bot.send_message(chat_id, "–§–∞–π–ª –≥–¥–µ-—Ç–æ —Å–ø—Ä—è—Ç–∞–ª—Å—è! üïµÔ∏è‚Äç‚ôÇÔ∏è –î–∞–≤–∞–π –¥—Ä—É–≥–æ–π –ø–æ–∏—â–µ–º?")
                return
            increment_download(code, user_id)
            bot.send_document(chat_id, files[code]["file_id"], caption="–õ–æ–≤–∏ —Å–≤–æ–π —Ñ–∞–π–ª! üöÄ")
            buttons = [create_inline_button(f"{i} ‚≠ê", callback_data=f"rate_{code}_{i}") for i in range(1, 6)]
            buttons.append(create_inline_button("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"review_{code}"))
            markup = create_inline_markup(buttons, row_width=3)
            bot.send_message(chat_id, "–ù—É –∫–∞–∫ —Ñ–∞–π–ª? –ü–æ—Å—Ç–∞–≤—å –∑–≤—ë–∑–¥—ã! üòé", reply_markup=markup)
        except ValueError as e:
            bot.send_message(chat_id, str(e))
        except ApiTelegramException as e:
            bot.send_message(chat_id, "–û–π-–æ–π, —Ñ–∞–π–ª –Ω–µ –¥–æ–ª–µ—Ç–µ–ª! üòÖ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {code}: {e}")

    # –†–∞—Å—Å—ã–ª–∫–∞
    def send_broadcast(broadcast_data, users):
        success_count = 0
        failed_users = []
        def send_to_user(uid):
            nonlocal success_count, failed_users
            try:
                if broadcast_data["content_type"] == "text":
                    bot.send_message(uid, broadcast_data["text"])
                elif broadcast_data["content_type"] == "photo":
                    bot.send_photo(uid, broadcast_data["media_id"], caption=broadcast_data["caption"])
                elif broadcast_data["content_type"] == "video":
                    bot.send_video(uid, broadcast_data["media_id"], caption=broadcast_data["caption"])
                elif broadcast_data["content_type"] == "document":
                    bot.send_document(uid, broadcast_data["media_id"], caption=broadcast_data["caption"])
                success_count += 1
            except ApiTelegramException as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —é–∑–µ—Ä—É {uid}: {e}")
                failed_users.append(uid)
        threads = []
        for uid in users:
            t = threading.Thread(target=send_to_user, args=(uid,))
            threads.append(t)
            t.start()
        for t in threads:
            t.join()
        return success_count, failed_users

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    @bot.message_handler(commands=['start'])
    @rate_limit()
    def handle_start(message):
        try:
            from main import ADMIN_IDS
            username = f"@{message.from_user.username}" if message.from_user.username else None
            save_user(message.from_user.id, username)
            user_id = message.from_user.id
            chat_id = message.chat.id
            channels = load_channels()

            if not check_subscription(user_id, channels, ADMIN_IDS):
                buttons = [create_inline_button(f"üì¢ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ {ch}", url=f"https://t.me/{ch[1:]}") for ch in channels]
                buttons.append(create_inline_button("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!", callback_data="check_subscription"))
                markup = create_inline_markup(buttons, row_width=1)
                bot.reply_to(message, "–≠–π, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã, —Ç–∞–º –¥–≤–∏–∂—É—Ö–∞! üòé", reply_markup=markup)
                return

            files = load_files()
            args = message.text.split()
            if len(args) > 1:
                code = args[1].strip().lower()
                if code in files:
                    send_file(chat_id, code, files, user_id)
                else:
                    bot.reply_to(message, f"–§–∞–π–ª —Å –∫–æ–¥–æ–º '{code}' –ø—Ä–æ–ø–∞–ª! üïµÔ∏è‚Äç‚ôÇÔ∏è –ó–∞–≥–ª—è–Ω–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥?",
                                 reply_markup=create_inline_markup([create_inline_button("üìÇ –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")]))
            else:
                redis_client.hset(f"bot_state:{user_id}", "navigation_stack", "")
                show_main_menu(chat_id)
                if user_id in ADMIN_IDS:
                    show_admin_panel(chat_id)
        except Exception as e:
            logger.error(f"–ö–æ—Å—è–∫ –≤ handle_start –¥–ª—è —é–∑–µ—Ä–∞ {message.from_user.id}: {e}")
            bot.reply_to(message, "–û–π-–æ–π, —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å! üòÖ –î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑?")

    @bot.message_handler(commands=['delete'])
    def handle_delete_file(message):
        from main import ADMIN_IDS
        if message.from_user.id not in ADMIN_IDS:
            bot.reply_to(message, "–¢–æ–ª—å–∫–æ –±–æ—Å—Å—ã –º–æ–≥—É—Ç —É–¥–∞–ª—è—Ç—å —Ñ–∞–π–ª—ã! üòè")
            return
        args = message.text.split(maxsplit=1)
        if len(args) < 2:
            bot.reply_to(message, "–ö–∏–¥–∞–π –∫–æ–¥ –∏–ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ /delete! üòÖ")
            return
        search_term = args[1].strip().lower()
        try:
            with get_db() as cursor:
                cursor.execute(
                    "SELECT code FROM files WHERE code = %s OR lower(name) = %s",
                    (search_term, search_term)
                )
                file = cursor.fetchone()
                if file:
                    delete_file(file[0])
                    bot.reply_to(message, f"–§–∞–π–ª —Å –∫–æ–¥–æ–º '{file[0]}' —É–¥–∞–ª—ë–Ω! ‚úÖ")
                else:
                    bot.reply_to(message, f"–§–∞–π–ª '{search_term}' –Ω–µ –Ω–∞–π–¥–µ–Ω! üïµÔ∏è‚Äç‚ôÇÔ∏è")
        except psycopg2.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {search_term}: {e}")
            bot.reply_to(message, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª! üòÖ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

    @bot.message_handler(commands=['feedback'])
    @rate_limit()
    def handle_feedback_command(message):
        try:
            username = f"@{message.from_user.username}" if message.from_user.username else None
            save_user(message.from_user.id, username)
            chat_id = message.chat.id
            buttons = [
                create_inline_button("üìπ –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ", callback_data="feedback_add_video"),
                create_inline_button("üöÄ –£–ª—É—á—à–∏—Ç—å", callback_data="feedback_improve"),
                create_inline_button("üêû –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ", callback_data="feedback_report_error")
            ]
            markup = create_inline_markup(buttons, row_width=1)
            bot.reply_to(message, "–í—ã–±–µ—Ä–∏ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è: üì©", reply_markup=markup)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_feedback_command –¥–ª—è —é–∑–µ—Ä–∞ {message.from_user.id}: {e}")
            bot.reply_to(message, "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! üòÖ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

    @bot.message_handler(commands=['reply'])
    def handle_reply(message):
        from main import ADMIN_IDS
        if message.from_user.id not in ADMIN_IDS:
            bot.reply_to(message, "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –æ—Ç–≤–µ—á–∞—Ç—å! üòè")
            return
        args = message.text.split(maxsplit=2)
        if len(args) < 3:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π: /reply <feedback_id> <—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞>")
            return
        try:
            feedback_id = int(args[1])
            reply_text = args[2]
            with get_db() as cursor:
                cursor.execute(
                    "SELECT user_id FROM feedback WHERE id = %s AND status = 'new'",
                    (feedback_id,)
                )
                feedback = cursor.fetchone()
                if not feedback:
                    bot.reply_to(message, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ —Å —Ç–∞–∫–∏–º ID! üïµÔ∏è‚Äç‚ôÇÔ∏è")
                    return
                user_id = feedback[0]
                update_feedback(feedback_id, status="replied", reply=reply_text)
            bot.send_message(user_id, f"–ê–¥–º–∏–Ω –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Ç–≤–æ–π –æ—Ç–∑—ã–≤ (ID: {feedback_id}):\n{reply_text}")
            bot.reply_to(message, f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}! ‚úÖ")
        except ValueError:
            bot.reply_to(message, "Feedback_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º! üòÖ")
        except ApiTelegramException as e:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç! üòÖ –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        except psycopg2.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_reply: {e}")
            bot.reply_to(message, "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö! üòÖ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            @bot.callback_query_handler(func=lambda call: True)
    def callback_query(call):
        from main import ADMIN_IDS, CATEGORY_MAP, STORAGE_CHANNEL_ID, PUBLIC_CHANNEL_ID
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        message_id = call.message.message_id
        files = load_files()
        categories = load_categories()
        channels = load_channels()
        ratings = load_ratings()
        download_stats = load_download_stats()

        navigation_stack = redis_client.hget(f"bot_state:{user_id}", "navigation_stack")
        navigation_stack = navigation_stack.split(",") if navigation_stack else []
        if not navigation_stack:
            redis_client.hset(f"bot_state:{user_id}", "navigation_stack", "")

        try:
            if call.data == "main_menu":
                redis_client.hset(f"bot_state:{user_id}", "navigation_stack", "")
                show_main_menu(chat_id, message_id)

            elif call.data == "top_users":
                navigation_stack.append("main_menu")
                redis_client.hset(f"bot_state:{user_id}", "navigation_stack", ",".join(navigation_stack))
                top_users = get_top_users()
                text = "üèÜ –¢–æ–ø-5 —é–∑–µ—Ä–æ–≤ –∑–∞ 24 —á–∞—Å–∞:\n"
                if not top_users:
                    text += "–ü–æ–∫–∞ —Ç—É—Ç –ø—É—Å—Ç–æ, –±—É–¥—å –ø–µ—Ä–≤—ã–º –≤ —Ç–æ–ø–µ! üòé"
                else:
                    for i, user in enumerate(top_users, 1):
                        text += f"{i}. {user['username']} ‚Äî üì• {user['downloads']} —Å–∫–∞—á–∏–≤–∞–Ω–∏–π, ‚úçÔ∏è {user['reviews']} –æ—Ç–∑—ã–≤–æ–≤\n"
                buttons = [create_inline_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
                markup = create_inline_markup(buttons)
                bot.edit_message_text(text, chat_id, message_id, reply_markup=markup)
                logger.info(f"–Æ–∑–µ—Ä {user_id} –ø–æ—Å–º–æ—Ç—Ä–µ–ª —Ç–æ–ø-5")

            elif call.data == "check_subscription":
                if check_subscription(user_id, channels, ADMIN_IDS):
                    redis_client.hset(f"bot_state:{user_id}", "navigation_stack", "")
                    show_main_menu(chat_id, message_id)
                    if user_id in ADMIN_IDS:
                        show_admin_panel(chat_id)
                else:
                    buttons = [create_inline_button(f"üì¢ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ {ch}", url=f"https://t.me/{ch[1:]}") for ch in channels]
                    buttons.append(create_inline_button("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!", callback_data="check_subscription"))
                    markup = create_inline_markup(buttons, row_width=1)
                    bot.edit_message_text("–≠–π, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã, –±–µ–∑ —ç—Ç–æ–≥–æ –Ω–µ –ø—É—â—É! üòú", chat_id, message_id, reply_markup=markup)

            elif call.data == "catalog":
                navigation_stack.append("main_menu")
                redis_client.hset(f"bot_state:{user_id}", "navigation_stack", ",".join(navigation_stack))
                buttons = [create_inline_button(cat, callback_data=f"category_{key}_0") for key, cat in CATEGORY_MAP.items()]
                buttons.append(create_inline_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"))
                markup = create_inline_markup(buttons)
                bot.edit_message_text("–í—ã–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ –∫–∞—á–∞—Ç—å –±—É–¥–µ–º? üìÇ", chat_id, message_id, reply_markup=markup)

            elif call.data.startswith("category_"):
                parts = call.data.split("_")
                category_key = parts[1]
                page = int(parts[2])
                category = CATEGORY_MAP.get(category_key)
                if category in categories and categories[category]:
                    per_page = 5
                    total_pages = (len(categories[category]) + per_page - 1) // per_page
                    start = page * per_page
                    end = start + per_page
                    buttons = []
                    for code in categories[category][start:end]:
                        avg_rating = sum(ratings.get(code, [])) / len(ratings.get(code, [])) if ratings.get(code) else 0
                        btn_text = f"{files[code]['name']} (‚≠ê {avg_rating:.1f})"
                        buttons.append(create_inline_button(btn_text, callback_data=f"file_info_{code}"))
                    nav_buttons = []
                    if page > 0:
                        nav_buttons.append(create_inline_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"category_{category_key}_{page-1}"))
                    if page < total_pages - 1:
                        nav_buttons.append(create_inline_button("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"category_{category_key}_{page+1}"))
                    nav_buttons.append(create_inline_button("‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="catalog"))
                    buttons.extend(nav_buttons)
                    markup = create_inline_markup(buttons, row_width=1)
                    navigation_stack.append(f"catalog")
                    redis_client.hset(f"bot_state:{user_id}", "navigation_stack", ",".join(navigation_stack))
                    bot.edit_message_text(f"–í–æ—Ç —Ñ–∞–π–ª—ã –≤ '{category}' (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):", chat_id, message_id, reply_markup=markup)
                else:
                    buttons = [create_inline_button("‚¨ÖÔ∏è –ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="catalog")]
                    markup = create_inline_markup(buttons)
                    bot.edit_message_text(f"–í '{category}' –ø–æ–∫–∞ –ø—É—Å—Ç–æ, –∑–∞–≥–ª—è–Ω–∏ –ø–æ–∑–∂–µ! üòè", chat_id, message_id, reply_markup=markup)

            elif call.data.startswith("file_info_"):
                code = call.data.replace("file_info_", "").strip().lower()
                if code not in files:
                    bot.edit_message_text("–§–∞–π–ª –∫—É–¥–∞-—Ç–æ –¥–µ–ª—Å—è! üò± –í–µ—Ä–Ω–∏—Å—å –≤ –∫–∞—Ç–∞–ª–æ–≥!", chat_id, message_id,
                                         reply_markup=create_inline_markup([create_inline_button("üìÇ –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")]))
                    return
                avg_rating = sum(ratings.get(code, [])) / len(ratings.get(code, [])) if ratings.get(code) else 0
                downloads = download_stats.get(code, 0)
                text = (f"üìÑ –§–∞–π–ª: {files[code]['name']}\n"
                        f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {avg_rating:.1f}\n"
                        f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–π: {downloads}")
                category = files[code]['category']
                category_key = next((key for key, value in CATEGORY_MAP.items() if value == category), list(CATEGORY_MAP.keys())[0])
                buttons = [
                    create_inline_button("üì• –ö–∞—á–Ω—É—Ç—å", callback_data=f"download_{code}"),
                    create_inline_button("üí¨ –û—Ç–∑—ã–≤—ã", callback_data=f"reviews_{code}_0"),
                    create_inline_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"category_{category_key}_0")
                ]
                markup = create_inline_markup(buttons, row_width=2)
                navigation_stack.append(f"category_{category_key}_0")
                redis_client.hset(f"bot_state:{user_id}", "navigation_stack", ",".join(navigation_stack))
                bot.edit_message_text(text, chat_id, message_id, reply_markup=markup)
                elif call.data.startswith("reviews_"):
                parts = call.data.split("_")
                if len(parts) != 3:
                    bot.edit_message_text("–û–π, –æ—Ç–∑—ã–≤—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å! üòÖ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!", chat_id, message_id,
                                         reply_markup=create_inline_markup([create_inline_button("‚¨ÖÔ∏è –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")]))
                    return
                code, page = parts[1].strip().lower(), int(parts[2])
                if code not in files:
                    bot.edit_message_text("–§–∞–π–ª –ø—Ä–æ–ø–∞–ª! üò± –í–µ—Ä–Ω–∏—Å—å –≤ –∫–∞—Ç–∞–ª–æ–≥!", chat_id, message_id,
                                         reply_markup=create_inline_markup([create_inline_button("üìÇ –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")]))
                    return
                reviews = load_reviews()
                rev_list = reviews.get(code, [])
                per_page = 3
                max_pages = 5
                total_pages = min(max_pages, (len(rev_list) + per_page - 1) // per_page)
                if page >= total_pages:
                    page = total_pages - 1
                if page < 0:
                    page = 0
                start = page * per_page
                end = min(start + per_page, len(rev_list))
                review_text = f"üìÑ –û—Ç–∑—ã–≤—ã –¥–ª—è {files[code]['name']} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):\n"
                if rev_list:
                    for i, review in enumerate(rev_list[start:end], start=start + 1):
                        review_text += f"{i}. {review['text']}\n"
                else:
                    review_text += "–ü–æ–∫–∞ —Ç–∏—à–∏–Ω–∞, –Ω–∞–ø–∏—à–∏ –ø–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤! üòú\n"
                buttons = [
                    create_inline_button("‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"review_{code}")
                ]
                if page > 0:
                    buttons.append(create_inline_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"reviews_{code}_{page-1}"))
                if page < total_pages - 1:
                    buttons.append(create_inline_button("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"reviews_{code}_{page+1}"))
                buttons.append(create_inline_button("‚¨ÖÔ∏è –ö —Ñ–∞–π–ª—É", callback_data=f"file_info_{code}"))
                markup = create_inline_markup(buttons, row_width=2)
                navigation_stack.append(f"file_info_{code}")
                redis_client.hset(f"bot_state:{user_id}", "navigation_stack", ",".join(navigation_stack))
                bot.edit_message_text(review_text, chat_id, message_id, reply_markup=markup)

            elif call.data.startswith("download_"):
                code = call.data.replace("download_", "").strip().lower()
                if not check_subscription(user_id, channels, ADMIN_IDS):
                    buttons = [create_inline_button(f"üì¢ –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ {ch}", url=f"https://t.me/{ch[1:]}") for ch in channels]
                    buttons.append(create_inline_button("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!", callback_data="check_subscription"))
                    markup = create_inline_markup(buttons, row_width=1)
                    bot.send_message(chat_id, "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –¥–∞–º —Ñ–∞–π–ª! üòè –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª—ã!", reply_markup=markup)
                    return
                if code in files:
                    send_file(chat_id, code, files, user_id)

            elif call.data.startswith("rate_"):
                _, code, rating = call.data.split("_")
                code = code.strip().lower()
                save_rating(code, int(rating))
                bot.edit_message_text(f"–ö—Ä—É—Ç–æ, —Ç—ã –¥–∞–ª {rating} ‚≠ê! –°–ø–∞—Å–∏–±–æ, –±—Ä–æ!", chat_id, message_id)

            elif call.data.startswith("review_"):
                code = call.data.replace("review_", "").strip().lower()
                if code not in files:
                    bot.edit_message_text("–§–∞–π–ª –∫—É–¥–∞-—Ç–æ —Å–±–µ–∂–∞–ª! üò± –í–µ—Ä–Ω–∏—Å—å –≤ –∫–∞—Ç–∞–ª–æ–≥!", chat_id, message_id,
                                         reply_markup=create_inline_markup([create_inline_button("üìÇ –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")]))
                    return
                msg = bot.send_message(chat_id, f"–ß—Ç–æ —Å–∫–∞–∂–µ—à—å –ø—Ä–æ {files[code]['name']}? –ü–∏—à–∏ –æ—Ç–∑—ã–≤! ‚úçÔ∏è")
                bot.register_next_step_handler(msg, lambda m: save_review_handler(m, code))

            elif call.data == "about":
                navigation_stack.append("main_menu")
                redis_client.hset(f"bot_state:{user_id}", "navigation_stack", ",".join(navigation_stack))
                buttons = [create_inline_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
                markup = create_inline_markup(buttons)
                bot.edit_message_text("–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –±–æ—Ç –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ —Ñ–∞–π–ª–æ–≤! üòé –ö–∞—á–∞–π, –æ—Ü–µ–Ω–∏–≤–∞–π, –ø–∏—à–∏ –æ—Ç–∑—ã–≤—ã. –ï—Å–ª–∏ —á—Ç–æ, —è –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!",
                                     chat_id, message_id, reply_markup=markup)

            # –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
            elif call.data == "feedback":
                navigation_stack.append("main_menu")
                redis_client.hset(f"bot_state:{user_id}", "navigation_stack", ",".join(navigation_stack))
                buttons = [
                    create_inline_button("üìπ –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ", callback_data="feedback_add_video"),
                    create_inline_button("üöÄ –£–ª—É—á—à–∏—Ç—å", callback_data="feedback_improve"),
                    create_inline_button("üêû –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ", callback_data="feedback_report_error"),
                    create_inline_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
                ]
                markup = create_inline_markup(buttons, row_width=1)
                bot.edit_message_text("–í—ã–±–µ—Ä–∏ —Ç–∏–ø –æ–±—Ä–∞—â–µ–Ω–∏—è: üì©", chat_id, message_id, reply_markup=markup)

            elif call.data.startswith("feedback_"):
                feedback_type = call.data.replace("feedback_", "")
                redis_client.hset(f"bot_state:{user_id}", "feedback_type", feedback_type)
                navigation_stack.append("feedback")
                redis_client.hset(f"bot_state:{user_id}", "navigation_stack", ",".join(navigation_stack))
                bot.send_message(chat_id, "–ü–∏—à–∏ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ! ‚úçÔ∏è" +
                                        (" (–º–æ–∂–µ—à—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≤–∏–¥–µ–æ)" if feedback_type == "add_video" else ""))
                bot.register_next_step_handler(call.message, process_feedback_message)

            elif call.data.startswith("admin_view_feedback_"):
                page = int(call.data.split("_")[3])
                per_page = 5
                feedbacks, total = load_feedback(page, per_page)
                total_pages = (total + per_page - 1) // per_page
                text = f"üì¨ –û—Ç–∑—ã–≤—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}):\n"
                if not feedbacks:
                    text += "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤! üòÖ"
                else:
                    for feedback in feedbacks:
                        text += (f"ID: {feedback['id']} | –û—Ç: {feedback['user_id']} | –¢–∏–ø: {feedback['feedback_type']}\n"
                                 f"–°–æ–æ–±—â–µ–Ω–∏–µ: {feedback['message']}\n"
                                 f"–°—Ç–∞—Ç—É—Å: {feedback['status']}" + (f" | –û—Ç–≤–µ—Ç: {feedback['reply']}" if feedback['reply'] else "") + "\n\n")
                buttons = []
                nav_buttons = []
                if page > 0:
                    nav_buttons.append(create_inline_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_view_feedback_{page-1}"))
                if page < total_pages - 1:
                    nav_buttons.append(create_inline_button("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"admin_view_feedback_{page+1}"))
                nav_buttons.append(create_inline_button("‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel"))
                buttons.append(nav_buttons)
                markup = create_inline_markup(buttons)
                navigation_stack.append("admin_panel")
                redis_client.hset(f"bot_state:{user_id}", "navigation_stack", ",".join(navigation_stack))
                bot.edit_message_text(text, chat_id, message_id, reply_markup=markup)

            elif call.data.startswith("reply_feedback_"):
                feedback_id = int(call.data.split("_")[2])
                redis_client.hset(f"bot_state:{user_id}", "replying_feedback_id", feedback_id)
                bot.send_message(chat_id, f"–ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∑—ã–≤ (ID: {feedback_id}):")
                bot.register_next_step_handler(call.message, process_reply_feedback)

            elif call.data.startswith("send_pm_"):
                target_user_id = int(call.data.split("_")[2])
                redis_client.hset(f"bot_state:{user_id}", "sending_pm_user_id", target_user_id)
                bot.send_message(chat_id, f"–ù–∞–ø–∏—à–∏ –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}:")
                bot.register_next_step_handler(call.message, process_send_pm)

            elif call.data == "admin_add_file":
                redis_client.hset(f"bot_state:{user_id}", "adding_file", "true")
                navigation_stack.append("admin_panel")
                redis_client.hset(f"bot_state:{user_id}", "navigation_stack", ",".join(navigation_stack))
                bot.send_message(chat_id, "–ö–∏–¥–∞–π —Ñ–∞–π–ª –≤ –Ω–∞—à —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª! üìé")
                bot.register_next_step_handler(call.message, process_file_upload)

            elif call.data.startswith("admin_list_files_"):
                navigation_stack.append("admin_panel")
                redis_client.hset(f"bot_state:{user_id}", "navigation_stack", ",".join(navigation_stack))
                page = int(call.data.split("_")[3])
                per_page = 5
                max_pages = 5
                try:
                    with get_db() as cursor:
                        cursor.execute("SELECT COUNT(*) FROM files")
                        total_files = min(cursor.fetchone()[0], per_page * max_pages)
                        if page >= max_pages:
                            page = max_pages - 1
                        cursor.execute("SELECT name FROM files ORDER BY name LIMIT %s OFFSET %s",
                                       (per_page, page * per_page))
                        file_rows = cursor.fetchall()
                    total_pages = (total_files + per_page - 1) // per_page
                    text = f"üìÑ –í—Å–µ —Ñ–∞–π–ª—ã ({total_files}):\n"
                    for row in file_rows:
                        text += f"- {row[0]}\n"
                    buttons = []
                    nav_buttons = []
                    if page > 0:
                        nav_buttons.append(create_inline_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_list_files_{page-1}"))
                    if page < total_pages - 1 and page < max_pages - 1:
                        nav_buttons.append(create_inline_button("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"admin_list_files_{page+1}"))
                    buttons.append(nav_buttons)
                    buttons.append([create_inline_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")])
                    markup = create_inline_markup(buttons)
                    bot.edit_message_text(text, chat_id, message_id, reply_markup=markup)
                except psycopg2.Error as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
                    bot.edit_message_text(
                        "–§–∞–π–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å! üòÖ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!",
                        chat_id, message_id,
                        reply_markup=create_inline_markup([create_inline_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")])
                    )

            elif call.data.startswith("admin_delete_file_page_"):
                navigation_stack.append("admin_panel")
                redis_client.hset(f"bot_state:{user_id}", "navigation_stack", ",".join(navigation_stack))
                page = int(call.data.split("_")[4])
                per_page = 5
                max_pages = 5
                try:
                    with get_db() as cursor:
                        cursor.execute("SELECT COUNT(*) FROM files")
                        total_files = min(cursor.fetchone()[0], per_page * max_pages)
                        if page >= max_pages:
                            page = max_pages - 1
                        cursor.execute("SELECT code, name FROM files ORDER BY name LIMIT %s OFFSET %s",
                                       (per_page, page * per_page))
                        file_rows = cursor.fetchall()
                    total_pages = (total_files + per_page - 1) // per_page
                    buttons = [create_inline_button(f"üóëÔ∏è {row[1]}", callback_data=f"admin_delete_{row[0]}") for row in file_rows]
                    nav_buttons = []
                    if page > 0:
                        nav_buttons.append(create_inline_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"admin_delete_file_page_{page-1}"))
                    if page < total_pages - 1 and page < max_pages - 1:
                        nav_buttons.append(create_inline_button("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"admin_delete_file_page_{page+1}"))
                    nav_buttons.append(create_inline_button("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_panel"))
                    buttons.extend(nav_buttons)
                    markup = create_inline_markup(buttons, row_width=1)
                    bot.edit_message_text(f"–ö–∞–∫–æ–π —Ñ–∞–π–ª —Å—Ç–µ—Ä–µ—Ç—å? üóëÔ∏è (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages})", chat_id, message_id, reply_markup=markup)
                except psycopg2.Error as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
                    bot.edit_message_text(
                        "–§–∞–π–ª—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å! üòÖ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!",
                        chat_id, message_id,
                        reply_markup=create_inline_markup([create_inline_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")])
                    )

            elif call.data.startswith("admin_delete_"):
                code = call.data.replace("admin_delete_", "").strip().lower()
                if code in files:
                    delete_file(code)
                    bot.edit_message_text(f"–§–∞–π–ª '{code}' –∏—Å–ø–∞—Ä–∏–ª—Å—è! ‚úÖ", chat_id, message_id,
                                         reply_markup=create_inline_markup([create_inline_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]))
                else:
                    bot.edit_message_text("–§–∞–π–ª —É–∂–µ –∫—Ç–æ-—Ç–æ —Å—Ç—ë—Ä! üòÖ", chat_id, message_id,
                                         reply_markup=create_inline_markup([create_inline_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]))
                                         elif call.data == "admin_broadcast":
                redis_client.hset(f"bot_state:{user_id}", "broadcasting", "true")
                navigation_stack.append("admin_panel")
                redis_client.hset(f"bot_state:{user_id}", "navigation_stack", ",".join(navigation_stack))
                bot.send_message(chat_id, "–ö–∏–¥–∞–π —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–∫—É, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏! üì¢")
                bot.register_next_step_handler(call.message, process_broadcast_message)

            elif call.data == "admin_publish_post":
                redis_client.hset(f"bot_state:{user_id}", "publishing_post", "true")
                navigation_stack.append("admin_panel")
                redis_client.hset(f"bot_state:{user_id}", "navigation_stack", ",".join(navigation_stack))
                bot.send_message(chat_id, "–ö–∏–¥–∞–π —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–∫—É, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª! üì¢")
                bot.register_next_step_handler(call.message, process_post_content)

            elif call.data == "admin_stats":
                navigation_stack.append("admin_panel")
                redis_client.hset(f"bot_state:{user_id}", "navigation_stack", ",".join(navigation_stack))
                total_users = len(get_users())
                active_users = get_active_users()
                total_reviews = get_reviews_count()
                total_downloads = sum(load_download_stats().values())
                text = (f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
                        f"üë• –í—Å–µ–≥–æ —é–∑–µ—Ä–æ–≤: {total_users}\n"
                        f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: {active_users}\n"
                        f"üì• –í—Å–µ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π: {total_downloads}\n"
                        f"‚úçÔ∏è –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {total_reviews}")
                buttons = [create_inline_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
                markup = create_inline_markup(buttons)
                bot.edit_message_text(text, chat_id, message_id, reply_markup=markup)

            elif call.data == "admin_manage_channels":
                navigation_stack.append("admin_panel")
                redis_client.hset(f"bot_state:{user_id}", "navigation_stack", ",".join(navigation_stack))
                channels = load_channels()
                text = "üìå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏:\n" + "\n".join([f"- {ch}" for ch in channels]) if channels else "–ö–∞–Ω–∞–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç! üòÖ"
                buttons = [
                    create_inline_button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="admin_add_channel"),
                    create_inline_button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="admin_remove_channel"),
                    create_inline_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
                ]
                markup = create_inline_markup(buttons)
                bot.edit_message_text(text, chat_id, message_id, reply_markup=markup)

            elif call.data == "admin_add_channel":
                navigation_stack.append("admin_manage_channels")
                redis_client.hset(f"bot_state:{user_id}", "navigation_stack", ",".join(navigation_stack))
                bot.send_message(chat_id, "–ö–∏–¥–∞–π —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://t.me/MyChannel):")
                bot.register_next_step_handler(call.message, set_channel)

            elif call.data == "admin_remove_channel":
                navigation_stack.append("admin_manage_channels")
                redis_client.hset(f"bot_state:{user_id}", "navigation_stack", ",".join(navigation_stack))
                channels = load_channels()
                buttons = [create_inline_button(f"üóëÔ∏è {ch}", callback_data=f"remove_channel_{ch}") for ch in channels]
                buttons.append(create_inline_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage_channels"))
                markup = create_inline_markup(buttons, row_width=1)
                bot.edit_message_text("–ö–∞–∫–æ–π –∫–∞–Ω–∞–ª —É–¥–∞–ª–∏—Ç—å? üóëÔ∏è", chat_id, message_id, reply_markup=markup)

            elif call.data.startswith("remove_channel_"):
                channel = call.data.replace("remove_channel_", "")
                remove_channel(channel)
                bot.edit_message_text(f"–ö–∞–Ω–∞–ª {channel} —É–¥–∞–ª—ë–Ω! ‚úÖ", chat_id, message_id,
                                     reply_markup=create_inline_markup([create_inline_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage_channels")]))

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ callback_query –¥–ª—è —é–∑–µ—Ä–∞ {user_id}, callback {call.data}: {e}")
            bot.answer_callback_query(call.id, "–û–π, —á—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å! üòÖ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")

    def save_review_handler(message, code):
        try:
            user_id = message.from_user.id
            review_text = message.text.strip() if message.text else ""
            if not review_text:
                bot.reply_to(message, "–≠–π, –ø—É—Å—Ç–æ–π –æ—Ç–∑—ã–≤ –Ω–µ –∫–∞—Ç–∏—Ç! üòú –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å!")
                return
            if len(review_text) > 200:
                bot.reply_to(message, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç! üòÖ –î–æ 200 —Å–∏–º–≤–æ–ª–æ–≤, –æ–∫?")
                return
            save_review(code, user_id, review_text)
            bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! üòä")
        except ValueError as e:
            bot.reply_to(message, str(e))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ save_review_handler –¥–ª—è —é–∑–µ—Ä–∞ {user_id}, –∫–æ–¥ {code}: {e}")
            bot.reply_to(message, "–û–π, –æ—Ç–∑—ã–≤ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è! üòÖ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")

    def process_reply_feedback(message):
        from main import ADMIN_IDS
        user_id = message.from_user.id
        if user_id not in ADMIN_IDS:
            bot.reply_to(message, "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –æ—Ç–≤–µ—á–∞—Ç—å! üòè")
            return
        feedback_id = redis_client.hget(f"bot_state:{user_id}", "replying_feedback_id")
        if not feedback_id:
            bot.reply_to(message, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! üòÖ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return
        feedback_id = int(feedback_id)
        reply_text = message.text.strip()
        if not reply_text:
            bot.reply_to(message, "–û—Ç–≤–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! üòÖ –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å.")
            return
        try:
            with get_db() as cursor:
                cursor.execute(
                    "SELECT user_id FROM feedback WHERE id = %s AND status = 'new'",
                    (feedback_id,)
                )
                feedback = cursor.fetchone()
                if not feedback:
                    bot.reply_to(message, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ —Å —Ç–∞–∫–∏–º ID! üïµÔ∏è‚Äç‚ôÇÔ∏è")
                    return
                target_user_id = feedback[0]
                update_feedback(feedback_id, status="replied", reply=reply_text)
            bot.send_message(target_user_id, f"–ê–¥–º–∏–Ω –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Ç–≤–æ–π –æ—Ç–∑—ã–≤ (ID: {feedback_id}):\n{reply_text}")
            bot.reply_to(message, f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}! ‚úÖ")
        except ApiTelegramException as e:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç! üòÖ –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
        except psycopg2.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ process_reply_feedback: {e}")
            bot.reply_to(message, "–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö! üòÖ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        finally:
            redis_client.hdel(f"bot_state:{user_id}", "replying_feedback_id")

    def process_send_pm(message):
        from main import ADMIN_IDS, ADMIN_USERNAME
        user_id = message.from_user.id
        if user_id not in ADMIN_IDS:
            bot.reply_to(message, "–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –õ–°! üòè")
            return
        target_user_id = redis_client.hget(f"bot_state:{user_id}", "sending_pm_user_id")
        if not target_user_id:
            bot.reply_to(message, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! üòÖ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return
        target_user_id = int(target_user_id)
        pm_text = message.text.strip()
        if not pm_text:
            bot.reply_to(message, "–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! üòÖ –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å.")
            return
        try:
            bot.send_message(target_user_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ {ADMIN_USERNAME}:\n{pm_text}")
            bot.reply_to(message, f"–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}! ‚úÖ")
        except ApiTelegramException as e:
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –õ–°! üòÖ –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")
        finally:
            redis_client.hdel(f"bot_state:{user_id}", "sending_pm_user_id")

    def process_file_upload(message):
        from main import ADMIN_IDS, STORAGE_CHANNEL_ID
        if redis_client.hget(f"bot_state:{message.from_user.id}", "adding_file") != "true" or message.from_user.id not in ADMIN_IDS:
            bot.reply_to(message, "–≠–π, —Ç—ã –Ω–µ –±–æ—Å—Å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞! üòè")
            return
        if not message.document:
            bot.reply_to(message, "–ö–∏–¥–∞–π –¥–æ–∫—É–º–µ–Ω—Ç, –∞ –Ω–µ —á—Ç–æ –ø–æ–ø–∞–ª–æ! üòÖ")
            redis_client.hdel(f"bot_state:{message.from_user.id}", "adding_file")
            return
        try:
            file_id = message.document.file_id
            file_name = message.document.file_name
            sent_message = bot.send_document(STORAGE_CHANNEL_ID, file_id, caption=f"–§–∞–π–ª –æ—Ç –∞–¥–º–∏–Ω–∞: {file_name}")
            redis_client.hset(f"bot_state:{message.from_user.id}", "file_id", file_id)
            redis_client.hset(f"bot_state:{message.from_user.id}", "file_name", file_name)
            buttons = [create_inline_button(cat, callback_data=f"set_category_{key}") for key, cat in CATEGORY_MAP.items()]
            markup = create_inline_markup(buttons)
            bot.reply_to(message, f"–§–∞–π–ª '{file_name}' –∑–∞–≥—Ä—É–∂–µ–Ω! –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
        except ApiTelegramException as e:
            bot.reply_to(message, "–ù–µ —Å–º–æ–≥ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ –∫–∞–Ω–∞–ª! üòÖ –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.")
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –≤ –∫–∞–Ω–∞–ª {STORAGE_CHANNEL_ID}: {e}")
            redis_client.hdel(f"bot_state:{message.from_user.id}", "adding_file")
            @bot.callback_query_handler(func=lambda call: call.data.startswith("set_category_"))
    def set_category(call):
        from main import ADMIN_IDS, CATEGORY_MAP
        user_id = call.from_user.id
        if redis_client.hget(f"bot_state:{user_id}", "adding_file") != "true" or user_id not in ADMIN_IDS:
            bot.answer_callback_query(call.id, "–≠–π, —Ç—ã –Ω–µ –±–æ—Å—Å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞! üòè")
            return
        category_key = call.data.replace("set_category_", "")
        category = CATEGORY_MAP.get(category_key)
        if not category:
            bot.answer_callback_query(call.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∫–∞–∫–∞—è-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–∞—è! üòÖ")
            return
        redis_client.hset(f"bot_state:{user_id}", "category", category)
        bot.send_message(call.message.chat.id, "–¢–µ–ø–µ—Ä—å –¥–∞–π –∫–æ–¥ –¥–ª—è —Ñ–∞–π–ª–∞ (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã, –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):")
        bot.register_next_step_handler(call.message, process_file_code)

    def process_file_code(message):
        from main import ADMIN_IDS
        if redis_client.hget(f"bot_state:{message.from_user.id}", "adding_file") != "true" or message.from_user.id not in ADMIN_IDS:
            bot.reply_to(message, "–≠–π, —Ç—ã –Ω–µ –±–æ—Å—Å –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞! üòè")
            return
        code = message.text.strip()
        if not validate_code(code):
            bot.reply_to(message, "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã! üòÖ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return
        file_id = redis_client.hget(f"bot_state:{message.from_user.id}", "file_id")
        file_name = redis_client.hget(f"bot_state:{message.from_user.id}", "file_name")
        category = redis_client.hget(f"bot_state:{message.from_user.id}", "category")
        if not all([file_id, file_name, category]):
            bot.reply_to(message, "–û–π, –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å! üòÖ –î–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ!")
            redis_client.hdel(f"bot_state:{message.from_user.id}", "file_id", "file_name", "category", "adding_file")
            return
        try:
            save_file(code, file_id, file_name, category)
            bot.reply_to(message, f"–§–∞–π–ª '{file_name}' –¥–æ–±–∞–≤–ª–µ–Ω —Å –∫–æ–¥–æ–º '{code}' –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'! ‚úÖ",
                         reply_markup=create_inline_markup([create_inline_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]))
        except ValueError as e:
            bot.reply_to(message, str(e))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {code}: {e}")
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª! üòÖ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        finally:
            redis_client.hdel(f"bot_state:{message.from_user.id}", "file_id", "file_name", "category", "adding_file")

    def process_broadcast_message(message):
        from main import ADMIN_IDS
        if redis_client.hget(f"bot_state:{message.from_user.id}", "broadcasting") != "true" or message.from_user.id not in ADMIN_IDS:
            bot.reply_to(message, "–≠–π, —Ç—ã –Ω–µ –±–æ—Å—Å –∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞! üòè")
            return
        content_type = None
        if message.text:
            content_type = "text"
        elif message.photo:
            content_type = "photo"
        elif message.video:
            content_type = "video"
        elif message.document:
            content_type = "document"
        if not content_type:
            bot.reply_to(message, "–ö–∏–¥–∞–π —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–∫—É, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç! üòÖ")
            redis_client.hdel(f"bot_state:{message.from_user.id}", "broadcasting")
            return
        try:
            broadcast_data = {"content_type": content_type}
            if content_type == "text":
                broadcast_data["text"] = message.text
                preview_message = bot.send_message(message.chat.id, f"–í–æ—Ç —Ç–≤–æ—è —Ä–∞—Å—Å—ã–ª–∫–∞:\n{message.text}")
            elif content_type == "photo":
                broadcast_data["media_id"] = message.photo[-1].file_id
                broadcast_data["caption"] = message.caption or ""
                preview_message = bot.send_photo(message.chat.id, broadcast_data["media_id"],
                                                caption=f"–í–æ—Ç —Ç–≤–æ—è —Ä–∞—Å—Å—ã–ª–∫–∞:\n{broadcast_data['caption']}")
            elif content_type == "video":
                broadcast_data["media_id"] = message.video.file_id
                broadcast_data["caption"] = message.caption or ""
                preview_message = bot.send_video(message.chat.id, broadcast_data["media_id"],
                                                caption=f"–í–æ—Ç —Ç–≤–æ—è —Ä–∞—Å—Å—ã–ª–∫–∞:\n{broadcast_data['caption']}")
            elif content_type == "document":
                broadcast_data["media_id"] = message.document.file_id
                broadcast_data["caption"] = message.caption or ""
                preview_message = bot.send_document(message.chat.id, broadcast_data["media_id"],
                                                   caption=f"–í–æ—Ç —Ç–≤–æ—è —Ä–∞—Å—Å—ã–ª–∫–∞:\n{broadcast_data['caption']}")
            import json
            redis_client.hset(f"bot_state:{message.from_user.id}", "broadcast_data", json.dumps(broadcast_data))
            buttons = [
                create_inline_button("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_broadcast"),
                create_inline_button("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_broadcast")
            ]
            markup = create_inline_markup(buttons)
            bot.send_message(message.chat.id, "–í—Å—ë –æ–∫? –û—Ç–ø—Ä–∞–≤–ª—è–µ–º? üöÄ", reply_markup=markup)
        except ApiTelegramException as e:
            bot.reply_to(message, "–û–π, —á—Ç–æ-—Ç–æ —Å —Ä–∞—Å—Å—ã–ª–∫–æ–π –Ω–µ —Ç–∞–∫! üòÖ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
            redis_client.hdel(f"bot_state:{message.from_user.id}", "broadcasting")

    @bot.callback_query_handler(func=lambda call: call.data in ["confirm_broadcast", "cancel_broadcast"])
    def handle_broadcast_confirmation(call):
        from main import ADMIN_IDS
        user_id = call.from_user.id
        if redis_client.hget(f"bot_state:{user_id}", "broadcasting") != "true" or user_id not in ADMIN_IDS:
            bot.answer_callback_query(call.id, "–≠–π, —Ç—ã –Ω–µ –±–æ—Å—Å –∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞! üòè")
            return
        if call.data == "cancel_broadcast":
            redis_client.hdel(f"bot_state:{user_id}", "broadcasting", "broadcast_data")
            bot.edit_message_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞! üòÖ", call.message.chat.id, call.message.message_id,
                                 reply_markup=create_inline_markup([create_inline_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]))
            return
        import json
        broadcast_data = redis_client.hget(f"bot_state:{user_id}", "broadcast_data")
        if not broadcast_data:
            bot.edit_message_text("–î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å! üòÖ –î–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ!", call.message.chat.id, call.message.message_id,
                                 reply_markup=create_inline_markup([create_inline_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]))
            redis_client.hdel(f"bot_state:{user_id}", "broadcasting")
            return
        broadcast_data = json.loads(broadcast_data)
        users = get_users()
        success_count, failed_users = send_broadcast(broadcast_data, users)
        bot.edit_message_text(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚úÖ\n–£—Å–ø–µ—à–Ω–æ: {success_count}\n–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {len(failed_users)}",
                             call.message.chat.id, call.message.message_id,
                             reply_markup=create_inline_markup([create_inline_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]))
        redis_client.hdel(f"bot_state:{user_id}", "broadcasting", "broadcast_data")

    def process_post_content(message):
        from main import ADMIN_IDS
        if redis_client.hget(f"bot_state:{message.from_user.id}", "publishing_post") != "true" or message.from_user.id not in ADMIN_IDS:
            bot.reply_to(message, "–≠–π, —Ç—ã –Ω–µ –±–æ—Å—Å –∏–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞—á–∞—Ç–∞! üòè")
            return
        content_type = None
        if message.text:
            content_type = "text"
        elif message.photo:
            content_type = "photo"
        elif message.video:
            content_type = "video"
        elif message.document:
            content_type = "document"
        if not content_type:
            bot.reply_to(message, "–ö–∏–¥–∞–π —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–∫—É, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç! üòÖ")
            redis_client.hdel(f"bot_state:{message.from_user.id}", "publishing_post")
            return
        try:
            post_data = {"content_type": content_type}
            if content_type == "text":
                post_data["text"] = message.text
                preview_message = bot.send_message(message.chat.id, f"–í–æ—Ç —Ç–≤–æ–π –ø–æ—Å—Ç:\n{message.text}")
            elif content_type == "photo":
                post_data["media_id"] = message.photo[-1].file_id
                post_data["caption"] = message.caption or ""
                preview_message = bot.send_photo(message.chat.id, post_data["media_id"],
                                                caption=f"–í–æ—Ç —Ç–≤–æ–π –ø–æ—Å—Ç:\n{post_data['caption']}")
            elif content_type == "video":
                post_data["media_id"] = message.video.file_id
                post_data["caption"] = message.caption or ""
                preview_message = bot.send_video(message.chat.id, post_data["media_id"],
                                                caption=f"–í–æ—Ç —Ç–≤–æ–π –ø–æ—Å—Ç:\n{post_data['caption']}")
            elif content_type == "document":
                post_data["media_id"] = message.document.file_id
                post_data["caption"] = message.caption or ""
                preview_message = bot.send_document(message.chat.id, post_data["media_id"],
                                                   caption=f"–í–æ—Ç —Ç–≤–æ–π –ø–æ—Å—Ç:\n{post_data['caption']}")
            import json
            redis_client.hset(f"bot_state:{message.from_user.id}", "post_content", json.dumps(post_data))
            buttons = [
                create_inline_button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="add_post_button"),
                create_inline_button("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ –∫–Ω–æ–ø–∫–∏", callback_data="skip_post_button")
            ]
            markup = create_inline_markup(buttons)
            bot.send_message(message.chat.id, "–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –∫ –ø–æ—Å—Ç—É? üîò", reply_markup=markup)
        except ApiTelegramException as e:
            bot.reply_to(message, "–û–π, —á—Ç–æ-—Ç–æ —Å –ø–æ—Å—Ç–æ–º –Ω–µ —Ç–∞–∫! üòÖ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–∞: {e}")
            redis_client.hdel(f"bot_state:{message.from_user.id}", "publishing_post")

    @bot.callback_query_handler(func=lambda call: call.data in ["add_post_button", "skip_post_button"])
    def handle_post_button(call):
        from main import ADMIN_IDS, PUBLIC_CHANNEL_ID
        user_id = call.from_user.id
        if redis_client.hget(f"bot_state:{user_id}", "publishing_post") != "true" or user_id not in ADMIN_IDS:
            bot.answer_callback_query(call.id, "–≠–π, —Ç—ã –Ω–µ –±–æ—Å—Å –∏–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞—á–∞—Ç–∞! üòè")
            return
        import json
        post_data = redis_client.hget(f"bot_state:{user_id}", "post_content")
        if not post_data:
            bot.edit_message_text("–î–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å! üòÖ –î–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ!", call.message.chat.id, call.message.message_id,
                                 reply_markup=create_inline_markup([create_inline_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]))
            redis_client.hdel(f"bot_state:{user_id}", "publishing_post")
            return
        post_data = json.loads(post_data)
        if call.data == "skip_post_button":
            publish_post(user_id, post_data, None)
            bot.edit_message_text("–ü–æ—Å—Ç —É–ª–µ—Ç–µ–ª –≤ –∫–∞–Ω–∞–ª! üöÄ", call.message.chat.id, call.message.message_id,
                                 reply_markup=create_inline_markup([create_inline_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]))
            redis_client.hdel(f"bot_state:{user_id}", "post_content", "publishing_post")
        else:
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:")
            bot.register_next_step_handler(call.message, process_button_text)

    def process_button_text(message):
        from main import ADMIN_IDS
        if redis_client.hget(f"bot_state:{message.from_user.id}", "publishing_post") != "true" or message.from_user.id not in ADMIN_IDS:
            bot.reply_to(message, "–≠–π, —Ç—ã –Ω–µ –±–æ—Å—Å –∏–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞—á–∞—Ç–∞! üòè")
            return
        button_text = message.text.strip()
        if not button_text:
            bot.reply_to(message, "–ë–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –Ω–µ –æ–±–æ–π–¥—ë–º—Å—è! üòÖ –î–∞–≤–∞–π –µ—â—ë —Ä–∞–∑.")
            return
        redis_client.hset(f"bot_state:{message.from_user.id}", "button_text", button_text)
        buttons = [
            create_inline_button("üîó –°—Å—ã–ª–∫–∞", callback_data="button_type_url"),
            create_inline_button("üîÑ Callback", callback_data="button_type_callback")
        ]
        markup = create_inline_markup(buttons)
        bot.reply_to(message, f"–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: '{button_text}'. –ö–∞–∫–æ–π —Ç–∏–ø –∫–Ω–æ–ø–∫–∏? üîò", reply_markup=markup)

    def process_button_url(message):
        from main import ADMIN_IDS, PUBLIC_CHANNEL_ID
        if redis_client.hget(f"bot_state:{message.from_user.id}", "publishing_post") != "true" or message.from_user.id not in ADMIN_IDS:
            bot.reply_to(message, "–≠–π, —Ç—ã –Ω–µ –±–æ—Å—Å –∏–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞—á–∞—Ç–∞! üòè")
            return
        url = message.text.strip()
        if not url.startswith("https://"):
            bot.reply_to(message, "–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å https://! üòÖ –ü–æ–ø—Ä–∞–≤—å!")
            return
        button_text = redis_client.hget(f"bot_state:{message.from_user.id}", "button_text")
        import json
        post_data = redis_client.hget(f"bot_state:{message.from_user.id}", "post_content")
        if not post_data or not button_text:
            bot.reply_to(message, "–û–π, –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å! üòÖ –î–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ!")
            redis_client.hdel(f"bot_state:{message.from_user.id}", "post_content", "button_text", "publishing_post")
            return
        post_data = json.loads(post_data)
        button = create_inline_button(button_text, url=url)
        publish_post(message.from_user.id, post_data, button)
        bot.reply_to(message, "–ü–æ—Å—Ç —É–ª–µ—Ç–µ–ª –≤ –∫–∞–Ω–∞–ª! üöÄ",
                     reply_markup=create_inline_markup([create_inline_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]))
        redis_client.hdel(f"bot_state:{message.from_user.id}", "post_content", "button_text", "publishing_post")

    def process_button_callback(message):
        from main import ADMIN_IDS, PUBLIC_CHANNEL_ID
        if redis_client.hget(f"bot_state:{message.from_user.id}", "publishing_post") != "true" or message.from_user.id not in ADMIN_IDS:
            bot.reply_to(message, "–≠–π, —Ç—ã –Ω–µ –±–æ—Å—Å –∏–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞—á–∞—Ç–∞! üòè")
            return
        callback_data = message.text.strip()
        if len(callback_data.encode('utf-8')) > 64:
            bot.reply_to(message, "Callback_data –¥–ª–∏–Ω–Ω–µ–µ 64 –±–∞–π—Ç! üòÖ –£–∫–æ—Ä–æ—Ç–∏!")
            return
        button_text = redis_client.hget(f"bot_state:{message.from_user.id}", "button_text")
        import json
        post_data = redis_client.hget(f"bot_state:{message.from_user.id}", "post_content")
        if not post_data or not button_text:
            bot.reply_to(message, "–û–π, –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å! üòÖ –î–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ!")
            redis_client.hdel(f"bot_state:{message.from_user.id}", "post_content", "button_text", "publishing_post")
            return
        post_data = json.loads(post_data)
        button = create_inline_button(button_text, callback_data=callback_data)
        publish_post(message.from_user.id, post_data, button)
        bot.reply_to(message, "–ü–æ—Å—Ç —É–ª–µ—Ç–µ–ª –≤ –∫–∞–Ω–∞–ª! üöÄ",
                     reply_markup=create_inline_markup([create_inline_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]))
        redis_client.hdel(f"bot_state:{message.from_user.id}", "post_content", "button_text", "publishing_post")

    def publish_post(user_id, post_data, button):
        from main import PUBLIC_CHANNEL_ID
        try:
            markup = create_inline_markup([button]) if button else None
            if post_data["content_type"] == "text":
                bot.send_message(PUBLIC_CHANNEL_ID, post_data["text"], reply_markup=markup)
            elif post_data["content_type"] == "photo":
                bot.send_photo(PUBLIC_CHANNEL_ID, post_data["media_id"], caption=post_data["caption"], reply_markup=markup)
            elif post_data["content_type"] == "video":
                bot.send_video(PUBLIC_CHANNEL_ID, post_data["media_id"], caption=post_data["caption"], reply_markup=markup)
            elif post_data["content_type"] == "document":
                bot.send_document(PUBLIC_CHANNEL_ID, post_data["media_id"], caption=post_data["caption"], reply_markup=markup)
            logger.info(f"–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ {PUBLIC_CHANNEL_ID} —é–∑–µ—Ä–æ–º {user_id}")
        except ApiTelegramException as e:
            bot.send_message(user_id, "–ü–æ—Å—Ç –Ω–µ —É–ª–µ—Ç–µ–ª –≤ –∫–∞–Ω–∞–ª! üòÖ –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞.")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª {PUBLIC_CHANNEL_ID}: {e}")

    def set_channel(message):
        from main import ADMIN_IDS
        if message.from_user.id not in ADMIN_IDS:
            bot.reply_to(message, "–≠–π, —Ç—ã –Ω–µ –±–æ—Å—Å! üòè")
            return
        channel = extract_channel_id(message.text)
        if not channel:
            bot.reply_to(message, "–°—Å—ã–ª–∫–∞ –∫–∞–∫–∞—è-—Ç–æ —Å—Ç—Ä–∞–Ω–Ω–∞—è! üòÖ –î–∞–≤–∞–π –Ω–æ—Ä–º–∞–ª—å–Ω—É—é: https://t.me/MyChannel")
            return
        save_channel(channel)
        bot.reply_to(message, f"–ö–∞–Ω–∞–ª {channel} –¥–æ–±–∞–≤–ª–µ–Ω! ‚úÖ",
                     reply_markup=create_inline_markup([create_inline_button("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_manage_channels")]))

    def process_feedback_message(message):
        try:
            user_id = message.from_user.id
            feedback_type = redis_client.hget(f"bot_state:{user_id}", "feedback_type")
            video_id = message.video.file_id if message.video else None
            feedback_text = message.text.strip() if message.text else (message.caption.strip() if message.caption else "")
            if not feedback_text:
                bot.reply_to(message, "–≠–π, –ø—É—Å—Ç–æ–π –æ—Ç–∑—ã–≤ –Ω–µ –∫–∞—Ç–∏—Ç! üòú –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å!")
                return
            if len(feedback_text) > 500:
                bot.reply_to(message, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç! üòÖ –î–æ 500 —Å–∏–º–≤–æ–ª–æ–≤, –æ–∫?")
                return
            save_feedback(user_id, feedback_text, video_id, feedback_type)
            bot.reply_to(message, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ê–¥–º–∏–Ω —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç! üòä")
            redis_client.hdel(f"bot_state:{user_id}", "feedback_type")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ process_feedback_message –¥–ª—è —é–∑–µ—Ä–∞ {user_id}: {e}")
            bot.reply_to(message, "–û–π, –æ—Ç–∑—ã–≤ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è! üòÖ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")
            redis_client.hdel(f"bot_state:{user_id}", "feedback_type")
        